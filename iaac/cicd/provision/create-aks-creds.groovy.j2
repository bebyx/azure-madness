import jenkins.model.*
import hudson.util.Secret
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.common.*
import com.cloudbees.plugins.credentials.impl.*
import com.cloudbees.plugins.credentials.domains.*

def domain = Domain.global() // Global scope
def store = Jenkins.instance.getExtensionList(
    'com.cloudbees.plugins.credentials.SystemCredentialsProvider'
)[0].getStore()

// Define credential IDs and values
def aksCredsId = 'AKS_CREDS'
def aksUsername = '{{ aks_sp_id }}'
def aksPassword = '{{ aks_sp_password }}'

def tenantIdCredsId = 'TENANT_ID'
def tenantId = '{{ tenant_id }}'

// Check if the AKS Service Principal credentials already exist
def existingAksCreds = store.getCredentials(domain).find { it.id == aksCredsId }
if (existingAksCreds == null) {
    // Create AKS Service Principal credentials
    def aksCreds = new UsernamePasswordCredentialsImpl(
        CredentialsScope.GLOBAL,
        aksCredsId,
        "AKS Service Principal credentials",
        aksUsername,
        aksPassword
    )

    store.addCredentials(domain, aksCreds)
    println "AKS credentials with ID '${aksCredsId}' created successfully."
} else {
    println "AKS credentials with ID '${aksCredsId}' already exists."
}

// Check if the Tenant ID credentials already exist
def existingTenantIdCreds = store.getCredentials(domain).find { it.id == tenantIdCredsId }
if (existingTenantIdCreds == null) {
    // Create Tenant ID credentials
    def tenantCreds = new StringCredentialsImpl(
        CredentialsScope.GLOBAL,
        tenantIdCredsId,
        "Azure Tenant ID",
        Secret.fromString(tenantId)
    )

    store.addCredentials(domain, tenantCreds)
    println "Tenant ID credentials with ID '${tenantIdCredsId}' created successfully."
} else {
    println "Tenant ID credentials with ID '${tenantIdCredsId}' already exists."
}
